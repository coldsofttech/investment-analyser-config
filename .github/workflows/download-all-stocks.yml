name: Download all.json (Tickers Dropdown)

on:
  workflow_dispatch:
    inputs:
      enable_debug_mode:
        description: 'Run debug-matrix job?'
        required: false
        default: false
  schedule:
    - cron: '30 0 * * 6'  # Every Saturday at 12:30 AM UTC

permissions:
  contents: write
  actions: write

jobs:
  split-stocks:
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'schedule' && github.ref == 'refs/heads/main')
    outputs:
      matrix: ${{ steps.gen_matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Dependencies
        run: |
          pip install -r stocks/requirements.txt

      - name: Generate Matrix Chunks
        id: gen_matrix
        env:
          CHUNK_SIZE: 1000
        run: |
          CHUNK_SIZE=$CHUNK_SIZE
          echo "üî¢ Using CHUNK_SIZE=$CHUNK_SIZE"
          python stocks/splitter.py --input stocks/stocks.json --chunk-size "$CHUNK_SIZE"
          echo "üîÅ Reading chunk IDs from file..."
          echo "matrix=$(jq -c . < chunk_ids.json)" >> $GITHUB_OUTPUT

      - name: Upload Chunks
        uses: actions/upload-artifact@v4
        with:
          name: chunk-files
          path: chunks/

  debug-matrix:
    needs: split-stocks
    if: ${{ github.event.inputs.enable_debug_mode == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Display Generated Matrix
        run: |
          echo "ü™™ Matrix output from split-stocks"
          echo "${{ needs.split-stocks.outputs.matrix }}"

  run-fetch:
    needs: split-stocks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chunk_id: ${{ fromJson(needs.split-stocks.outputs.matrix) }}
      fail-fast: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Dependencies
        run: |
          pip install -r stocks/requirements.txt

      - name: Download Chunk
        uses: actions/download-artifact@v4
        with:
          name: chunk-files
          path: ./chunks

      - name: Run Export
        env:
          MAX_WORKERS: 10
        run: |
          echo "üöÄ Running for chunk ID: ${{ matrix.chunk_id }}"
          python stocks/export_all.py --chunk-id ${{ matrix.chunk_id }} --max-workers $MAX_WORKERS

      - name: Upload JSON Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: stock-${{ github.job }}-${{ strategy.job-index }}
          path: output/*.json

      - name: Check "error.log" Exists
        id: check_error
        run: |
          if [ -f error.log ]; then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Error Artifact
        if: ${{ steps.check_error.outputs.found == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: error-${{ github.job }}-${{ strategy.job-index }}
          path: error.log

  merge:
    needs: run-fetch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Dependencies
        run: |
          pip install -r stocks/requirements.txt

      - name: Download All Chunks
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Merge Chunks
        run: |
          python stocks/merger.py --input-dir artifacts

      - name: Upload JSON Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: stock-${{ github.job }}-${{ strategy.job-index }}
          path: output/*.json

  collect-and-push:
    needs: merge
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Push JSON to Target Repo
        if: success()
        env:
          TARGET_REPO_MAIN: ${{ secrets.TARGET_REPO }}
          TARGET_BRANCH_MAIN: ${{ secrets.TARGET_BRANCH }}
          TARGET_REPO_TEST: ${{ secrets.TARGET_REPO_TEST }}
          TARGET_BRANCH_TEST: ${{ secrets.TARGET_BRANCH_TEST }}
          GITHUB_TOKEN: ${{ secrets.TARGET_REPO_PAT }}
        run: |
          echo "üîç Branch is $GITHUB_REF"
          if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            TARGET_REPO="$TARGET_REPO_MAIN"
            BRANCH="$TARGET_BRANCH_MAIN"
          elif [[ "$GITHUB_REF" == "refs/heads/test" ]]; then
            TARGET_REPO="$TARGET_REPO_TEST"
            BRANCH="$TARGET_BRANCH_TEST"
          else
            echo "üö´ Workflow not triggered on 'main' or 'test' branch. Exiting..."
            exit 0
          fi
          
          WORKDIR=$(mktemp -d)
          
          echo "üì¶ Cloning target repo..."
          git clone --depth 1 --branch $BRANCH https://x-access-token:${{ secrets.TARGET_REPO_PAT }}@$TARGET_REPO $WORKDIR
          
          echo "üìÇ Creating docs/tickers folder if missing..."
          mkdir -p $WORKDIR/docs/tickers
          
          echo "üìÇ Copying output files..."
          cp -f artifacts/**/all.json $WORKDIR/docs/tickers/
          
          cd $WORKDIR
          if git status --porcelain | grep .; then
            git add docs/tickers/all.json
            git commit -m "üìà Update all.json in docs/tickers/ from ${{ github.repository }} at ${{ github.run_id }}"
            git push origin $BRANCH
            echo "‚úÖ JSON pushed to $TARGET_REPO docs/tickers/"
          else
            echo "‚ÑπÔ∏è No changes to commit."
          fi